{"ast":null,"code":"var _jsxFileName = \"/Users/macone/Development/TranslateMe/TranslateMeFrontend/src/components/Profile.js\";\nimport React from 'react';\nimport { Card } from 'semantic-ui-react';\nimport Categories from './Categories';\nexport default class Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.showUploadWidget = () => {\n      window.cloudinary.openUploadWidget({\n        autoupload: false,\n        cloudName: \"translateme\",\n        uploadPreset: \"qks45ycm\",\n        sources: [\"local\", \"dropbox\", \"camera\", \"facebook\", \"instagram\", \"url\"],\n        showAdvancedOptions: false,\n        cropping: false,\n        multiple: false,\n        autoupload: false,\n        singleUploadAutoClose: false,\n        defaultSource: \"local\",\n        styles: {\n          autoupload: false,\n          palette: {\n            autoupload: false,\n            window: \"#F5F5F5\",\n            sourceBg: \"#FFFFFF\",\n            windowBorder: \"#90a0b3\",\n            tabIcon: \"#0094c7\",\n            inactiveTabIcon: \"#69778A\",\n            menuIcons: \"#0094C7\",\n            link: \"#53ad9d\",\n            action: \"#8F5DA5\",\n            inProgress: \"#0194c7\",\n            complete: \"#53ad9d\",\n            error: \"#c43737\",\n            textDark: \"#000000\",\n            textLight: \"#FFFFFF\"\n          },\n          autoupload: false,\n          fonts: {\n            autoupload: false,\n            default: null,\n            \"'IBM Plex Sans', sans-serif\": {\n              url: \"https://fonts.googleapis.com/css?family=IBM+Plex+Sans\",\n              active: true\n            }\n          }\n        }\n      }, (err, info) => {\n        if (!err) {\n          console.log(\"Upload Widget event - \", info);\n\n          if (info.event === \"success\") {\n            console.log(\"URL \" + info.info.url);\n            fetch('http://localhost:3000/api/v1/users', {\n              method: \"POST\",\n              headers: {\n                \"Content-type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                image: info.info.url\n              })\n            }).then(res => res.json()).then(data => {\n              // debugger\n              this.handleFetchResponse(data);\n            });\n          }\n        }\n      });\n    };\n\n    this.handleFetchResponse = data => {\n      console.log(data); // debugger\n\n      this.setState({\n        scores: data.result.images[0].classifiers[0].classes.filter(img => img.score < 1.00 && img.score > 0.9),\n        //.sort((a, b) => (a.score < b.score) ? 1 : -1)\n        data: data\n      });\n    };\n\n    this.state = {\n      hightlight: false,\n      scores: [],\n      data: []\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      raised: true,\n      className: \"card\",\n      id: \"upload_widget\",\n      onClick: this.showUploadWidget,\n      class: \"cloudinary-button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Upload files\"), React.createElement(Categories, {\n      image: this.state.data,\n      scores: this.state.scores,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/macone/Development/TranslateMe/TranslateMeFrontend/src/components/Profile.js"],"names":["React","Card","Categories","Profile","Component","constructor","props","showUploadWidget","window","cloudinary","openUploadWidget","autoupload","cloudName","uploadPreset","sources","showAdvancedOptions","cropping","multiple","singleUploadAutoClose","defaultSource","styles","palette","sourceBg","windowBorder","tabIcon","inactiveTabIcon","menuIcons","link","action","inProgress","complete","error","textDark","textLight","fonts","default","url","active","err","info","console","log","event","fetch","method","headers","body","JSON","stringify","image","then","res","json","data","handleFetchResponse","setState","scores","result","images","classifiers","classes","filter","img","score","state","hightlight","render"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport { Card } from 'semantic-ui-react'\n\nimport Categories from './Categories';\n\nexport default class Profile extends React.Component{\n    constructor(props) {\n        super(props)\n        this.state = { \n            hightlight: false,\n            scores:[],\n            data: []\n        }\n      \n    }\ncompone\n    \nshowUploadWidget=()=> {\n    \n    window.cloudinary.openUploadWidget({\n        autoupload: false,\n       cloudName: \"translateme\",\n       uploadPreset: \"qks45ycm\",\n       sources: [\n           \"local\",\n           \"dropbox\",\n           \"camera\",\n           \"facebook\",\n           \"instagram\",\n           \"url\"\n       ],\n       showAdvancedOptions: false,\n       cropping: false,\n       multiple: false,\n       autoupload: false,\n       singleUploadAutoClose: false,\n       defaultSource: \"local\",\n       styles: {\n        autoupload: false,\n           palette: {\n            autoupload: false,\n               window: \"#F5F5F5\",\n               sourceBg: \"#FFFFFF\",\n               windowBorder: \"#90a0b3\",\n               tabIcon: \"#0094c7\",\n               inactiveTabIcon: \"#69778A\",\n               menuIcons: \"#0094C7\",\n               link: \"#53ad9d\",\n               action: \"#8F5DA5\",\n               inProgress: \"#0194c7\",\n               complete: \"#53ad9d\",\n               error: \"#c43737\",\n               textDark: \"#000000\",\n               textLight: \"#FFFFFF\"\n           },\n           autoupload: false,\n           fonts: {\n            autoupload: false,\n               default: null,\n               \"'IBM Plex Sans', sans-serif\": {\n                   url: \"https://fonts.googleapis.com/css?family=IBM+Plex+Sans\",\n                   active: true\n               }\n           }\n       }\n       \n   },\n   \n    (err, info) => {\n      if (!err) {   \n        \n        console.log(\"Upload Widget event - \", info);\n   \n        if(info.event === \"success\"){\n            console.log(\"URL \" + info.info.url)\n        fetch('http://localhost:3000/api/v1/users',{\n        method: \"POST\",\n        headers: {\"Content-type\": \"application/json\"},\n        body: JSON.stringify({\n            image: info.info.url\n            })\n        })\n        .then(res=>res.json()).then(data => {\n            // debugger\n \n        this.handleFetchResponse(data)})\n        }\n\n      }\n     });\n     \n    }\n\n\n    handleFetchResponse=(data)=>{\n        console.log(data)\n        // debugger\n        this.setState({\n            scores: data.result.images[0].classifiers[0].classes.filter(img => img.score < 1.00 && img.score > 0.9), //.sort((a, b) => (a.score < b.score) ? 1 : -1)\n            data: data\n          })\n   \n    }\n    render(){\n\n        return(\n            <div>\n                <Card.Group>\n                    <button raised className=\"card\" id=\"upload_widget\" onClick={this.showUploadWidget} class=\"cloudinary-button\">Upload files</button>\n\n                \n                    <Categories image={this.state.data} scores={this.state.scores}/>\n                </Card.Group>\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}